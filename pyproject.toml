[tool.poetry]
name = "itglue-superops-migrator"
version = "1.0.0"
description = "Enterprise-grade migration tool for transferring ITGlue document exports to SuperOps Knowledge Base"
authors = ["DataBridge <databridge@wyre.technology>"]
readme = "README.md"
packages = [{include = "migrator"}]

[tool.poetry.dependencies]
python = "^3.10"
beautifulsoup4 = "^4.12.3"
httpx = "^0.27.0"
pydantic = "^2.6.0"
pydantic-settings = "^2.2.0"
click = "^8.1.7"
structlog = "^24.1.0"
pandas = "^2.2.0"
lxml = "^5.1.0"
aiosqlite = "^0.20.0"
python-dotenv = "^1.0.0"
rich = "^13.7.0"
tenacity = "^8.2.3"
pyyaml = "^6.0.1"
aiofiles = "^23.2.1"
python-magic = "^0.4.27"
pillow = "^10.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^24.1.0"
ruff = "^0.2.0"
mypy = "^1.8.0"
types-pyyaml = "^6.0.12"
types-aiofiles = "^23.2.0"

[tool.poetry.scripts]
itglue-migrate = "migrator.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py310']

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = ["E501"]  # line too long (handled by black)

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=migrator --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
source = ["migrator"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]